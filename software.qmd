---
title: "Software"
---

I strongly advocate for the use of open source software. Throughout my PhD, I have interacted with several industrial partners who have relied on proprietary software, while also expecting thorough and comparative results. Despite these challenges, I have consistently promoted the use of open source software and am proud of my contribution towards improving computing software, no matter how small it may be. All of my repositories can be found on my [github](https://github.com/mloubout).

Currently, I manage the software stack of our Lab at Georgia Tech, which includes CI, Julia registry, custom registry, and others. I am also the main developer for several open source software projects that focus on wave-equation based inversion, data interpolation, and machine learning for the scientific community. Our team aims to create portable and extensible software, and you can find all of our projects at [SlimGroup](https://github.com/slimgroup). 

Below are some of my most relevant contributions to open source software:

# Main contributor

[Devito](https://github.com/devitocodes/devito): 
This software is a Finite-difference DSL and just-in-time compiler that facilitates high-performance stencil computation. Devito's interface and high-level API are based on SymPy for symbolic manipulation. The compiler generates high-performance C-code and supports standard openMP, MPI, GPU offloading via OpenACC or OpenMP, and MPI+GPU.

[JUDI](https://github.com/slimgroup/JUDI.jl):
This software is a high-level API for linear algebra used in wave-equation-based inversion. We built this package on top of Devito to have high-performance wave-equation solvers.

[JUDI4Cloud](https://github.com/slimgroup/JUDI4Cloud.jl):
JUDI4Cloud is an extension of [JUDI] that runs the core computation, which is the task-parallel wave equation solves, on Azure using Azure Batch. This software interfaces with [AzureClusterlessHPC.jl] for the Julia interface with Azure Batch.

[XConv](https://github.com/slimgroup/XConv.jl):
This repository implements a high-performance, low-memory convolutional layer in both Julia (for Flux.jl) and Python (for PyTorch). The convolutional layer has virtually zero memory imprint for training using randomized linear algebra to compute an unbiased estimate of the gradient with respect to the weights. Additionally, a byte-only implementation of the ReLU layer leads to a memory reduction by a factor of X2 for full networks.

[TimeProbeSeismic](https://github.com/slimgroup/TimeProbeSeismic.jl):
This repository implements a high-performance, low-memory convolutional layer in both Julia (for Flux.jl) and Python (for PyTorch). The convolutional layer has virtually zero memory imprint for training using randomized linear algebra to compute an unbiased estimate of the gradient with respect to the weights. Additionally, a byte-only implementation of the ReLU layer leads to a memory reduction by a factor of X2 for full networks.

[ImageGather](https://github.com/slimgroup/ImageGather.jl):
ImageGather is a simple surface offset gather software used for quality control on seismic inverted models. This software implements the double-migration method using [JUDI](https://github.com/slimgroup/JUDI.jl) and
[Devito](https://github.com/devitocodes/devito) for surface gathers and the standard extended Born modeling for subsurface offset gathers.

[SlimOptim](https://github.com/slimgroup/SlimOptim.jl):
This softwares is a translation in julia of three of our main optimization algorithms: SPG, PQN and Linearized Bregman. The implementation is not aimed to computationnaly optimal for small problems but to be used in the context of PDE constrained optimiztion where the cost of the PDE solves is the main computational cost. The SPG and PQN implementation are inspired from and adapted from [minConf](https://www.cs.ubc.ca/~schmidtm/Software/minConf.html).

[PhotoAcoustic.jl](https://github.com/slimgroup/PhotoAcoustic.jl):
Photocacoustic imaging and iversion sofware. This software is built on top of [JUDI.jl](https://github.com/slimgroup/JUDI.jl) and [Devito](https://github.com/devitocodes/devito) to offer a high-level interface and state-of-the art computational performance. It also designed to be used in combinagtion with machine learning framework with differentation rules defined to use the photacoustic propagators as layers/sumaries.

# Contributor

[ExtendedConv](https://github.com/slimgroup/ExtendedConv.jl):
Extended convolution that use spatially constrained varying convolution weight to convexify machine learning loss.

[InvertibleNetworks](https://github.com/slimgroup/InvertibleNetworks.jl):
Julia implementation of invertible networks. Invertible networks are fully reversible and do not need to store intermediate state variable for training making them virtually memory free.

[SLIM softwares](https://github.com/slimgroup):
I am the main mainainer and manager of our software stack (CI, versionning, julia regsitration, ....).

# Minor contributions

[Sympy](https://github.com/sympy/sympy):
Minor pull request contributions mostly related to bugs found through [Devito](https://github.com/devitocodes/devito).

- Various minor bug fixes in several Julia packages
